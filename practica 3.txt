static void ejer1()
{
    Console.CursorVisible = false;
    ConsoleKeyInfo k = Console.ReadKey(true);
    while (k.Key != ConsoleKey.End)
    {
        Console.Clear();
        Console.Write($"{k.Modifiers}-{k.Key}-{k.KeyChar}");
        k = Console.ReadKey(true);
    }
}

static void imprimirMatriz(double[,] matriz)
{
    for(int i = 0; i < matriz.GetLength(0); i++)
    {
        Console.WriteLine("_______");
        for(int j = 0; j < matriz.GetLength(1); j++)
        {
            Console.Write("|");
            
            Console.Write(matriz[i, j]);
        }
        Console.Write("|");
        Console.WriteLine();
    }
    Console.WriteLine("_______") ;
}

static void ImprimirMatrizConFormato(double[,] matriz, string formatString)
{
    for (int i = 0; i < matriz.GetLength(0); i++)
    {
        Console.WriteLine("_______");
        for (int j = 0; j < matriz.GetLength(1); j++)
        {
            Console.Write("|");
            Console.Write($"elemento = {matriz[i, j].ToString(formatString)}");
        }
        Console.Write("|");
        Console.WriteLine();
    }
    Console.WriteLine("_______");
}

static double[] GetDiagonalPrincipal(double[,] matriz)
{
   double[] diagonalPrinci = new double[matriz.GetLength(0)];
   for (int i = 0; i < matriz.GetLength(0); i++)
   {
        diagonalPrinci[i] = matriz[i,i];
   }
   return diagonalPrinci;
}
static double[] GetDiagonalSecundaria(double[,] matriz)
{
    int j = 0;
    double[] diagonalPrinci = new double[matriz.GetLength(0)];
    for (int i = matriz.GetLength(0)-1; i > 0; i--)
    {
        diagonalPrinci[j] = matriz[i, i];
        j++;
    }
    return diagonalPrinci;
}
static double[][] GetArregloDeArreglo(double[,] matriz)
{
    double[][] retorno = new double[matriz.GetLength(0)][];
    for (int i = 0; i < matriz.GetLength(0); i++)
    {
        retorno[i]= new double[matriz.GetLength(0)];
        for (int j = 0; j < matriz.GetLength(1); j++)
        {
            retorno[i][j] = matriz[i, j];
        }
    }
    return retorno;
}

static double[,]? Suma(double[,] A, double[,] B)
{
    if (A.GetLength(0) == B.GetLength(0) && A.GetLength(1) == B.GetLength(1))
    {
        double[,] retorno = new double[A.GetLength(0), A.GetLength(1)];
        for (int i = 0; i < A.GetLength(0); i++)
        {
            for (int j = 0; j < A.GetLength(1); j++)
            {
                retorno[i, j] = A[i, j] + B[i, j];
            }
        }
        return retorno;
    }
    else return null;
}
static double[,]? Resta(double[,] A, double[,] B)
{
    if (A.GetLength(0) == B.GetLength(0) && A.GetLength(1) == B.GetLength(1))
    {
        double[,] retorno = new double[A.GetLength(0), A.GetLength(1)];
        for (int i = 0; i < A.GetLength(0); i++)
        {
            for (int j = 0; j < A.GetLength(1); j++)
            {
                retorno[i, j] = A[i, j] * B[i, j];
            }
        }
        return retorno;
    }
    else return null;
}
static double[,] Multiplicacion(double[,] A, double[,] B)
{
    int DFF = (A.GetLength(0) > B.GetLength(0)) ? A.GetLength(0) : B.GetLength(0);
    int recorrerF = (A.GetLength(0) < B.GetLength(0)) ? A.GetLength(0) : B.GetLength(0);
    int DFL = (A.GetLength(1) > B.GetLength(1)) ? A.GetLength(1) : B.GetLength(1);
    int recorrerL = (A.GetLength(1) < B.GetLength(1)) ? A.GetLength(1) : B.GetLength(1);
    double[,] retorno = new double[DFF, DFL];
    for (int i = 0; i < recorrerF; i++)
    {
        for (int j = 0; j < recorrerL; j++)
        {
            retorno[i, j] = A[i, j] * B[i, j];
        }
    }
    return retorno;
}

static void ejer7()
{
    int i = 10;
    var x = i * 1.0;
    var y = 1f;
    var z = i * y;
    Console.WriteLine("tipo de variable x: {0} | tipo variable y: {1} | tipo de variable z: {2}", x.GetType(), y.GetType(), z.GetType());
}
static void ejer8()
{
    //object[] obj = new int[10];//no se puede asignar un tipo distino por mas que sea object
    dynamic dyna = 13;
    //Console.WriteLine(obj.Length);
    Console.WriteLine(dyna.Length);//no existe el metodo para int
}